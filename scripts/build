#!/bin/sh

# Formatting variables
blackBG='\033[1;40m'
cyan='\033[1;36m'$blackBG
gray='\033[1;37m'$blackBG
green='\033[1;32m'$blackBG
purple='\033[1;35m'$blackBG
red='\033[0;31m'$blackBG
yellow='\033[1;33m'$blackBG
nc='\033[0m'$blackBG

project=$(pwd | sed -e "s/.*\///g")
branch=$(git rev-parse --abbrev-ref HEAD)
reBump='^([0-9]+\.[0-9]+\.[0-9]+|patch|minor|major)$'

# if a bump was specified, bump the version and push that first
if [ "$#" == 1 ]; then
  if [[ $1 =~ $reBump ]]; then
    grunt bump:$1
    git commit -am "bump to v${version}"
    git push origin $branch
  else
    echo "\n${red}Fatal error: Invalid bump value!${nc}\n"
    exit 1
  fi
fi

# get everything ready
bower update
grunt build

# figure out the version
version=$(cat VERSION)

# checkout a branch for this version
git checkout -bf v${version}

# add the distribution file & push it
git add ${project}.min.js
git commit -am "v${version}"
git push origin v${version} --force
git tag v${version}

# remove "latest" tag on the remote & create a new local one
git push origin :refs/tags/latest
git tag -f latest

# push up new tags
git push origin --tags

# cleanup
rm -rf VERSION

# go back to where you started
git checkout $branch

